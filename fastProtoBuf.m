function [ Output ] = fastProtoBuf( fileLoc, fields, varargin )
%fastProtoBuf. Quick and dirty way of reading field values from protobuf
%file generated by Fetch software
%   Function is unaware of overall sctructure of protobuf file but simply
%   reads in values for certain field. Currently considers everything to be
%   a numeric value.
%
% Syntax:  fastProtoBuf( fileLoc, fields )
%
% Inputs:
%       fileLoc             - Location of protobuf file.
%       fields              - Cell array of requested fields names. Give
%                             cell with 2 values to denote object search
%                             (e.g. {'last_target_mm','x'})
% Optional Inputs:
%       fieldTypes          - Cell array of field types in 'fields'.
%                             Can be 'num','str' or 'bool'(default:'num')
% Outputs:
%       Output              - Structure containing the requested values

%% Validate inputs
if ~ischar(fileLoc)
    error('File location is of type %s and must be a string',class(fileLoc));
end
if ~iscell(fields)
    error('Requested fields is of type %s and must be a cell',class(fields));
end
% Check optional fieldtypes value.
if nargin==2
    fieldTypes = {'num'};
    fieldTypes = repmat(fieldTypes,1,length(fields));
else
    fieldTypes = varargin{1};
end
if size(fieldTypes,2)~=size(fields,2)
    error('Size of field names and types do not match');
end

%% Read proto file.
fid = fopen(fileLoc);
if fid==-1, error('could not open file at %s',fileLoc); end
protoText = fread(fid,inf);
protoText = char(protoText');
fclose(fid);
%% Get all fields.
fieldValues = {};
for iField = 1: length(fields)
    % Check for object of property.
    if length(fields{iField})==2
        searchStr = sprintf('(?<=%s \\{)(.*?\\})',fields{iField}{1});
        searchText = char(regexp(protoText,searchStr,'match'));
        fields{iField}=fields{iField}{2};
    else
        searchText = protoText;
    end
    % grep field value
    searchStr = sprintf('(?<=%s: ).*',fields{iField});
    value = regexp(searchText,searchStr,'match','dotexceptnewline');
    
    % Convert value.
    if isempty(value)
        error('Field %s not found',fields{iField});
        value = [];
    else
    if length(value)>1
        warning('Multiple instances of field %s. Using First instance',fields{iField});
        value = value(1);
    end
        switch fieldTypes{iField}
            case 'num'
                value = str2double(value);
            case 'str'
                value = value{:};
            case 'bool'
                value = cellstr(value{:});
                if ~strcmp(value,'true') && ~strcmp(value,'false')
                    warning('Field %s is marked as boolean but field value %s was not recognized',fieldTypes{iField},value);
                    value = [];
                end
                if strcmp(value,'true'); value = true; end
                if strcmp(value,'false'); value = false; end
            otherwise 
                warning('Field type %s not recognized',fieldTypes{iField});
                value = [];
        end
    end
    % Store result.
    fieldValues(iField) = {value};
end

%% Generate output structure.
Output = cell2struct(fieldValues, fields, 2);


