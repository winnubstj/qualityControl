function [ output ] = fastProtoBuf( fileLoc, fields, varargin )
%fastProtoBuf. Quick and dirty way of reading field values from protobuf
%file generated by Fetch software
%   Function is unaware of overall sctructure of protobuf file but simply
%   reads in values for certain field. Currently considers everything to be
%   a numeric value.
%
% Syntax:  fastProtoBuf( fileLoc, fields )
%
% Inputs:
%       fileLoc             - Location of protobuf file.
%       fields              - Cell array of requested fields names
% Optional Inputs:
%       fieldTypes          - Cell array of field types in 'fields'.
%                             Can be 'num' or 'str'(default:'num')
% Outputs:
%       Output              - Structure containing the requested values

% fileLoc = 'Y:\mousebrainmicro\acquisition\2016-02-21\2016-02-21\00\00033\00033-ngc.microscope';
% fields = {'x_overlap_um','y_overlap','x_size_um','y_size_um'};

%% Validate inputs
if ~ischar(fileLoc)
    error('File location is of type %s and must be a string',class(fileLoc));
end
if ~iscell(fields)
    error('Requested fields is of type %s and must be a cell',class(fields));
end
% Check optional fieldtypes value.
if nargin==2
    fieldTypes = {'num'};
    fieldTypes = repmat(fieldTypes,1,length(fields));
else
    fieldTypes = varagin{1};
end

%% Read proto file.
fid = fopen(fileLoc);
if fid==-1, error('could not open file at %s',fileLoc); end
protoText = fread(fid,inf);
protoText = char(protoText');

%% Get all fields.
fieldValues = {};
for iField = 1: length(fields)
    % grep field value
    searchStr = sprintf('(?<=%s: ).*',fields{iField});
    value = regexp(protoText,searchStr,'match','dotexceptnewline');
    % Convert value.
    switch fieldTypes{iField}
        case 'num'
            value = str2double(value);
        case 'str'
            value = value{:};
    end
    % Store result.
    fieldValues(iField) = {value};
end

%% Generate output structure.
Output = cell2struct(fieldValues, fields, 2);


